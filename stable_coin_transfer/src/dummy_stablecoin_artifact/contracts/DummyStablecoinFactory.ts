/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.97.0
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from 'fuels';
import type {
  Provider,
  Account,
  DeployContractOptions,
  DeployContractResult,
} from 'fuels';

import { DummyStablecoin } from './DummyStablecoin';

const bytecode = decompressBytecode(
  ''
);

export class DummyStablecoinFactory extends ContractFactory {
  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, DummyStablecoin.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: DummyStablecoin.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy(
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<DummyStablecoin>> {
    const factory = new DummyStablecoinFactory(wallet);
    return factory.deploy(options);
  }
}
